<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Files Page</title>
    <style>
        button {
            cursor: pointer;
        }

        input[type=submit] {
            cursor: pointer;
        }
    </style>
</head>
<body>
<h1>File Handler</h1>
<form method="post" action="/api/files" enctype="multipart/form-data" novalidate>
    <label for="files">Choose files:</label>
    <input type="file" name="files" id="files" multiple>
    <input type="submit" name="submit" value="Upload" style="background-color: greenyellow">
</form>
<hr>
<label hidden for="file_name">Enter file name:</label>
<input hidden type="text" id="file_name" placeholder="file name">
<button hidden id="download">Download</button>

<h3>All files</h3>
{{$files := index .Data "files"}}
<ul>
    {{range $files}}
    <li>
        <a href="/api/file?file_name={{.Key}}">{{.Key}}</a>
        <button onclick="deleteFile({{.Key}})" style="background-color: yellow">Delete</button>
    </li>
    {{end}}
</ul>
<button onclick="downloadCSV()" style="background-color: cyan">Download CSV</button>
<button onclick="downloadExcel()" style="background-color: darkcyan">Download Excel</button>
<br>
<hr>
<button onclick="deleteAll()" style="background-color: red">Delete All</button>

<script>
    function deleteFile(fileKey) {
        const url = "/api/file";
        const data = JSON.stringify({key: fileKey})
        fetch(url, {
            credentials: "same-origin",
            mode: "same-origin",
            method: "DELETE",
            headers: {"Content-Type": "application/json"},
            body: data
        }).then(result => {
            if (result.status === 200) {
                location.reload();
            }
        }).catch(error => console.log);
    }

    function deleteAll() {
        const url = "/api/files";
        fetch(url, {
            credentials: "same-origin",
            mode: "same-origin",
            method: "DELETE",
            headers: {"Content-Type": "application/json"}
        }).then(result => {
            if (result.status === 200) {
                location.reload();
            }
        }).catch(error => console.log);
    }

    function downloadCSV() {
        const url = "/api/files/csv";
        let fileName = "unnamed.csv"

        fetch(url, {
            credentials: "same-origin",
            mode: "same-origin",
            method: "GET",
            headers: {"Content-Type": "application/json"}
        }).then(response => {
            const contentDisposition = response.headers.get('content-disposition');
            if (contentDisposition) {
                const fileNameRegex = new RegExp(`(filename=)(.*)`, 'g');
                const match = contentDisposition.match(fileNameRegex);
                if (match && match.length) {
                    fileName = match[0].split("=")[1];
                }
            }

            return response.blob()
        }).then(body => {
            const a = document.createElement('a');
            const objectURL = window.URL.createObjectURL(body);

            try {
                a.style.display = 'none';
                a.href = objectURL;
                a.download = fileName;
                document.body.appendChild(a);
                a.click();
            } finally {
                window.URL.revokeObjectURL(objectURL);
                document.body.removeChild(a);
            }
        }).catch(error => console.log);
    }

    function downloadExcel() {
        const url = "/api/files/excel";
        let fileName = "unnamed.xlsx"

        fetch(url, {
            credentials: "same-origin",
            mode: "same-origin",
            method: "GET",
            headers: {"Content-Type": "application/json"}
        }).then(response => {
            const contentDisposition = response.headers.get('content-disposition');
            if (contentDisposition) {
                const fileNameRegex = new RegExp(`(filename=)(.*)`, 'g');
                const match = contentDisposition.match(fileNameRegex);
                if (match && match.length) {
                    fileName = match[0].split("=")[1];
                }
            }

            return response.blob()
        }).then(body => {
            const a = document.createElement('a');
            const objectURL = window.URL.createObjectURL(body);

            try {
                a.style.display = 'none';
                a.href = objectURL;
                a.download = fileName;
                document.body.appendChild(a);
                a.click();
            } finally {
                window.URL.revokeObjectURL(objectURL);
                document.body.removeChild(a);
            }
        }).catch(error => console.log);
    }

</script>
</body>
</html>