version: "3.9"
services:
  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: "user"
      RABBITMQ_DEFAULT_PASS: "password"
    restart: always
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
  redis:
    image: redis
  # Core Service
  core-service:
#    build:
#      context: ./service/core
    image: bogdanrat/webserver_coreservice
    ports:
      - "3000:3000"
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
      auth-service:
        condition: service_started
      storage-service:
        condition: service_started
      prometheus:
        condition: service_started
    links:
      - rabbitmq
      - redis
      - auth-service
      - storage-service
    environment:
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AUTH_SERVICE_HOST=auth-service
      - AUTH_SERVICE_PORT=50051
      - STORAGE_SERVICE_HOST=storage-service
      - STORAGE_SERVICE_PORT=50052
      - AWS_ACCESS_KEY_ID=${ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${SECRET_ACCESS_KEY}
    volumes:
    - ./service/core/config.json:/config.json
  # Auth Service
  auth-service:
    hostname: auth-service
#    build:
#      context: ./service/auth
    image: bogdanrat/webserver_authservice
    ports:
      - "8081:8081"
      - "50051:50051"
    restart: on-failure
    volumes:
    - ./service/auth/config.json:/config.json
  # Storage Service
  storage-service:
    hostname: storage-service
#    build:
#      context: ./service/storage
    image: bogdanrat/webserver_storageservice
    ports:
      - "50052:50052"
    restart: on-failure
    volumes:
      - ./service/storage/data:/data
      - ./service/storage/config.json:/config.json
    environment:
      - AWS_ACCESS_KEY_ID=${ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${SECRET_ACCESS_KEY}
  # Prometheus
  prometheus:
    image: prom/prometheus:v2.27.0
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    restart: unless-stopped
  # Grafana
  grafana:
    image: grafana/grafana:7.5.6
    ports:
      - 3001:3000
    volumes:
      - ./data/grafana:/var/lib/grafana
    restart: unless-stopped
  # Telegraf
  # Telegraf will collect the metrics about the server resources (memory, CPU, disk, and network traffic)
  # and Docker daemon (usage of resources per container), and then forward these metrics to the Prometheus server
  telegraf:
    image: telegraf:latest
    volumes:
      - ./config/telegraf.conf:/etc/telegraf/telegraf.conf
      - /var/run/docker.sock:/var/run/docker.sock